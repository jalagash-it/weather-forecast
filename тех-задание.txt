Задание на стажировку

Общие требования:
1.	При верстке можно использовать препроцессоры CSS (SASS/SCSS, LESS, – на выбор). 
2.	Использование сторонних библиотек будет плюсом только в случае, если это оправданно и вы сможете объяснить причину выбора. Показав свои знания в грамотном применении сторонних готовых решений, вы имеете шанс повысить свою профессиональную привлекательность для нас.
3.	Для шрифтовых иконок можно использовать Font Awesome, подключение так же не через CDN, а из корня проекта. Плюсом будет работа с SVG-иконками
4.	Макета нет. Нужно придумать удобный интерфейс с минимальными UI ухищрениями. Так же необходимо сделать адаптив под все разрешения. Требования к адаптиву – на всех разрешениях экрана макет не должен “ломаться”, то есть не должно быть наслоений элементов друг на друга, текст не должен вылезать за пределы родительского блока, отступы не должны быть слишком большими, по сравнению с разрешением экрана (на планшетах и в мобильной версии) и т.д. В общем, всё должно быть аккуратно и удобно.
5.	Пишите код так, как бы вы его писали в работе — внутренности задания будут оцениваться даже тщательней, чем внешнее соответствие заданию. Код должен быть организован так, чтобы его можно было заново использовать.
6.	Помните про обработку ошибок!
7.	Особое внимание следует уделить скорости работы и удобства интерфейса. Зависание интерфейса при выполнении операций недопустимо.
8.	Во время загрузки данных стоит показать какой-то индикатор
9.	Будет плюсом использование библиотек готовых компонентов, таких как Material-UI.


Реализовать задание 1 и задание 2 в вид SPAс использованием React и Redux.
	Для роутинга желательно использовать react-router-dom, но при желании можно выбрать другой роутинг (при выборе своего, необходимо обосновать выбор). 
	В Redux необходима архитектура с возможностью масштабирования, для запросов в апи использовать Thunk или Saga.
	В случае использования Axios для запросов к апи, создать instance с указанием Base Url, будет плюсом использование middleware при запросах и ответах в апи (технически они не нужны в данном проекте, просто показать возможные обработки ошибок, добавление заголовков и т.д.)

Желательно, чтоб само приложение должно было написано на TypeScript, с использованием интерфейсов, типов и т.д. Для Redux желательно применить Redux ToolKit.

	
Задание: 

1. 	Сделать локальную регистрацию и авторизацию. 
	Для хранения данных использовать localStorage. 
	Для работы с API можно использовать axios.

	При открытии сайта пользователь попадает на страницу регистрации (Если он не авторизовывался ранее).На странице отображается Форма регистрации содержит поля электронной почты, логина и пароля (логин и почта уникальны).
Данные пользователя сохраняются (Пользователей может быть больше одного).

	При регистрации добавить валидацию:
		1. На пустые поля (в том числе поле, в котором только пробелы)
		2. На уже существующий логин или электронную почту в localStorage
		3. Пароль не менее 8 символов.


	При ошибке в каком-нибудь пункте валидации должна отобразиться ошибка под соответствующим инпутом( валидация : пароль короче 8 символов – ошибка под полем пароля и т.п.)
	Если валидация пройдена и пользователь зарегистрировался - необходимо перенаправить пользователя на отдельную страницу авторизации (поле логина и пароля, валидация полей аналогична регистрации)

	После авторизации пользователь перенаправляется на страницу, на которой происходит работа с API (Главная страница).



2.	Суть главной страницы – отображение общей информации о погоде. Для получения погоды в городах можно использовать любую открытую API на свое усмотрение (OpenWeather API, например).
	Так же здесь располагается информация о погоде в городах по умолчанию (Москва, Париж, Лондон, Нью-Йорк, Пекин) в слайдере. Слайдер должен быть написан вручную)
	Реализация слайдера (количество слайдов, отображающихся сразу и при прокрутке слайдера) по своему усмотрению.
	Слайдер должен быть с анимированными переходами между слайдами, так же должна быть пагинация слайдов (в виде точек, чтобы была возможность переключиться на нужный слайд)

	Один слайд представляет собой прямоугольник, в котором есть название города и фон в виде фото этого города и краткая информация о погоде в данном городе (температура и общее состояние – облачно, ясно и т.д.). 

	При клике на слайд с городом происходит редирект на отдельную страницу с полной информацией о выбранном городе (имеется ввиду полная информация о погоде). 

На странице должно быть поле для ввода и кнопка рядом для поиска своего города.
	 При успешном запросе (валидация: поле не может быть пустым) и получении ответа без ошибок данный город добавляется в слайдер последним элементом и сразу открывается его подробная информация (редирект, описанный выше).
	При ошибке – оповещать пользователя об ошибке.

Должна быть кнопка выхода, которая перенаправляет на страницу логина и текущий пользователь перестает быть авторизованным. 


3. 	Добавить логику сохранения определенных городов для каждого юзера – пользователь может добавить какой-либо город в избранные и при следующем логине этот город будет сразу в слайдере, вместе с городами по умолчанию. Город можно также удалить из избранных.

	У React приложения должна быть мобильная версия (до 320px, дизайн на ваше усмотрение, в данном случае красота не так важна, как сам функционал)
	Для работы с формами использовать готовые библиотеки, в том числе и для валидации (например - react-hook-form).
